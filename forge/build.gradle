plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name = "Curse Maven"
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://jitpack.io' }
    mavenCentral()
    maven {
        name 'Curios maven'
        url = "https://maven.theillusivec4.top/"
    }

    maven {
        name 'JEI maven'
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "CTM Maven"
        url = "https://maven.tterrag.com/"
    }
    maven { url = 'https://maven.blamejared.com/' }
    mavenCentral()
}

dependencies {
    include(annotationProcessor(implementation("com.github.LlamaLad7:MixinExtras:0.1.1")))

    forge("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    //VS2
    modApi("org.valkyrienskies:valkyrienskies-118-forge:${rootProject.vs2_version}") { transitive = false }
    implementation("org.valkyrienskies.core:api:1.1.0+2b2f93f793") { transitive = false }

    //Funni magic
    modImplementation("curse.maven:malum-484064:4616320")

    // JEI Dependency
    //compileOnly("mezz.jei:jei-${minecraft_version}:${jeiVersion}:api")
    //runtimeOnly("mezz.jei:jei-${minecraft_version}:${jeiVersion}")

    // Curios dependency
    compileOnly("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}:api")
    runtimeOnly("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}")

    implementation("team.lodestar.lodestone:lodestone:${minecraft_version}-${lodestone_version}")

    // JOML
    compileOnly("org.joml:joml:1.10.4")
    compileOnly("org.joml:joml-primitives:1.10.0")

    // Add Kotlin for Forge.
    implementation(forgeRuntimeLibrary('curse.maven:kotlinforforge-351264:3925887'))
}

processResources {
    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "vs2_version", vs2_version,
            "version", version,
            "forge_version", forge_version.split("\\.")[0], // only specify major version of forge
            "minecraft_version", minecraft_version
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

loom {
    forge {
        mixinConfig(
                "malumian_skies-common.mixins.json",
                "malumian_skies.mixins.json"
        )
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
    }
}